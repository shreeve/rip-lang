# ==============================================================================
# CoffeeScript Compatibility Tests
# ==============================================================================
#
# Tests for backward compatibility features that allow legacy CoffeeScript
# syntax to work in Rip while compiling to modern ES6 JavaScript.
#
# IMPORTANT: These are TRANSITION/COMPATIBILITY features only.
# New code should use modern ES6 syntax for clarity and consistency.
# ==============================================================================

# ==============================================================================
# POSTFIX SPREAD/REST - CoffeeScript Compatibility
# ==============================================================================

# -----------------------------------------------------------------------------
# Array Destructuring with Postfix Rest
# -----------------------------------------------------------------------------

test 'postfix rest in array destructuring', '''
  [first, rest...] = [1, 2, 3, 4]
  rest
  ''', [2, 3, 4]

test 'postfix rest at start', '''
  [all...] = [1, 2, 3]
  all
  ''', [1, 2, 3]

test 'postfix rest with prefix elements', '''
  [a, b, rest...] = [1, 2, 3, 4, 5]
  rest
  ''', [3, 4, 5]

# -----------------------------------------------------------------------------
# Function Rest Parameters (Postfix)
# -----------------------------------------------------------------------------

test 'postfix rest params single', '''
  fn = (args...) -> args
  fn(1, 2, 3)
  ''', [1, 2, 3]

test 'postfix rest params with regular param', '''
  fn = (first, rest...) -> rest
  fn(1, 2, 3, 4)
  ''', [2, 3, 4]

test 'postfix rest params multiple regular', '''
  fn = (a, b, rest...) -> rest
  fn(1, 2, 3, 4, 5)
  ''', [3, 4, 5]

test 'postfix rest in arrow function', '''
  add = (nums...) -> nums.reduce ((a, b) -> a + b), 0
  add(1, 2, 3, 4, 5)
  ''', 15

# -----------------------------------------------------------------------------
# Array Spread (Postfix)
# -----------------------------------------------------------------------------

test 'postfix spread in array literal', '''
  arr = [1, 2, 3]
  [arr...]
  ''', [1, 2, 3]

test 'postfix spread with prefix elements', '''
  arr = [2, 3, 4]
  [1, arr...]
  ''', [1, 2, 3, 4]

test 'postfix spread with suffix elements', '''
  arr = [1, 2]
  [arr..., 3, 4]
  ''', [1, 2, 3, 4]

test 'postfix spread with both', '''
  arr = [2, 3]
  [1, arr..., 4]
  ''', [1, 2, 3, 4]

test 'multiple postfix spreads', '''
  a = [1, 2]
  b = [3, 4]
  [a..., b...]
  ''', [1, 2, 3, 4]

# -----------------------------------------------------------------------------
# Function Call Spread (Postfix)
# -----------------------------------------------------------------------------

test 'postfix spread in function call', '''
  fn = (a, b, c) -> a + b + c
  args = [1, 2, 3]
  fn(args...)
  ''', 6

test 'postfix spread with regular args', '''
  fn = (a, b, c, d) -> a + b + c + d
  args = [2, 3]
  fn(1, args..., 4)
  ''', 10

# -----------------------------------------------------------------------------
# Object Spread/Rest (Postfix)
# -----------------------------------------------------------------------------

test 'postfix object rest destructuring', '''
  {a, rest...} = {a: 1, b: 2, c: 3}
  rest.b
  ''', 2

test 'postfix object spread in literal', '''
  obj = {b: 2, c: 3}
  result = {a: 1, obj...}
  result.c
  ''', 3

# -----------------------------------------------------------------------------
# Mixed Prefix and Postfix
# -----------------------------------------------------------------------------

test 'mix prefix and postfix in array', '''
  a = [1, 2]
  b = [5, 6]
  [...a, 3, 4, b...]
  ''', [1, 2, 3, 4, 5, 6]

test 'mix prefix and postfix in params', '''
  fn = (...first) -> first
  result = fn(1, 2, 3)
  result
  ''', [1, 2, 3]

# -----------------------------------------------------------------------------
# Range Operators (Should NOT Transform)
# -----------------------------------------------------------------------------

test 'inclusive range not transformed', '''
  [1..5]
  ''', [1, 2, 3, 4, 5]

test 'exclusive range not transformed', '''
  [1...5]
  ''', [1, 2, 3, 4]

test 'range in for loop not transformed', '''
  sum = 0
  sum += i for i in [1...5]
  sum
  ''', 10

test 'array slice not transformed', '''
  arr = [0, 1, 2, 3, 4]
  arr[1...3]
  ''', [1, 2]

# -----------------------------------------------------------------------------
# Code Generation Tests
# -----------------------------------------------------------------------------

code 'postfix rest array', '''
  [a, rest...] = arr
  ''', '''
  let a, rest;
  [a, ...rest] = arr;
  '''

code 'postfix rest params', '''
  fn = (args...) -> args
  ''', '''
  let fn;
  fn = (function(...args) {
    return args;
  });
  '''

code 'postfix spread array', '''
  arr = [1, 2]
  [0, arr..., 3]
  ''', '''
  let arr;
  arr = [1, 2];
  [0, ...arr, 3];
  '''

code 'postfix spread call', '''
  fn(args...)
  ''', '''
  fn(...args);
  '''

code 'postfix object rest', '''
  {a, rest...} = obj
  ''', '''
  let a, rest;
  ({a, ...rest} = obj);
  '''

code 'range not transformed', '''
  [1...10]
  ''', '''
  ((s, e) => Array.from({length: Math.max(0, Math.abs(e - s))}, (_, i) => s + (i * (s <= e ? 1 : -1))))(1, 10);
  '''

# -----------------------------------------------------------------------------
# Edge Cases
# -----------------------------------------------------------------------------

test 'nested postfix spread', '''
  inner = [2, 3]
  outer = [[1, inner..., 4]]
  outer[0]
  ''', [1, 2, 3, 4]

test 'postfix rest with destructuring', '''
  [[a, b...]] = [[1, 2, 3, 4]]
  b
  ''', [2, 3, 4]

test 'postfix in comprehension', '''
  arrays = [[1, 2], [3, 4]]
  result = []
  for arr in arrays
    result.push(arr...)
  result
  ''', [1, 2, 3, 4]

# ==============================================================================
# LEGACY EXISTENTIAL OPERATOR - CoffeeScript Compatibility
# ==============================================================================

test 'legacy existential null fallback', '''
  x = null
  y = 42
  x ? y
  ''', 42

test 'legacy existential undefined fallback', '''
  x = undefined
  y = "default"
  x ? y
  ''', "default"

test 'legacy existential with value', '''
  x = 10
  y = 99
  x ? y
  ''', 10

test 'legacy existential with zero', '''
  x = 0
  y = 99
  x ? y
  ''', 0

test 'legacy existential with false', '''
  x = false
  y = true
  x ? y
  ''', false

test 'legacy existential with empty string', '''
  x = ""
  y = "fallback"
  x ? y
  ''', ""

test 'chained legacy existential', '''
  a = null
  b = null
  c = "value"
  a ? b ? c
  ''', "value"

test 'ternary unchanged', '''
  condition = true
  condition ? "yes" : "no"
  ''', "yes"

test 'ternary with numbers', '''
  x = 5
  x > 3 ? "big" : "small"
  ''', "big"

test 'legacy existential in ternary', '''
  a = null
  b = 42
  c = true
  c ? (a ? b) : 0
  ''', 42

code 'legacy existential compiles to ??', '''
  x = null
  y = 5
  x ? y
  ''', '''
  let x, y;
  x = null;
  y = 5;
  (x ?? y);
  '''

code 'ternary stays ternary', '''
  x = true
  x ? 1 : 2
  ''', '''
  let x;
  x = true;
  (x ? 1 : 2);
  '''

# ==============================================================================
# COMBINED COMPATIBILITY FEATURES
# ==============================================================================

test 'postfix spread with legacy existential', '''
  arr = null
  backup = [1, 2, 3]
  selected = arr ? backup
  result = [0, selected...]
  result
  ''', [0, 1, 2, 3]

test 'all compatibility features together', '''
  obj = null
  defaults = {a: 1, b: 2}
  {x, rest...} = obj ? defaults
  rest.b
  ''', 2

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Compatibility features: Postfix spread/rest (x...), Legacy existential (x ? y)
# Tests: 45 total (45 passing, 0 failing)
# Coverage: All postfix spread/rest contexts, legacy existential vs ternary, combined features
