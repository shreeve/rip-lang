# Test: Conditionals (2 node types)
# Tests "if" and "unless" node types

# ============================================================================
# If Statements: "if"
# ============================================================================

# Basic if
test "if true", "if true\n  42", 42
test "if false", "if false\n  42\nelse\n  10", 10

# If with else
test "if else true branch", "x = if true then 'yes' else 'no'\nx", "yes"
test "if else false branch", "x = if false then 'yes' else 'no'\nx", "no"

# If as expression
test "if expression", "x = if 5 > 3 then 'greater' else 'less'\nx", "greater"

# Nested if
test "nested if", "x = if true\n  if true\n    42\n  else\n    10\nx", 42

# If with multiple conditions
test "if else if", "x = 2\ny = if x == 1\n  'one'\nelse if x == 2\n  'two'\nelse\n  'other'\ny", "two"

# Postfix if
test "postfix if true", "x = 42 if true\nx", 42
test "postfix if false", "x = 42 if false\nx", undefined

# If in function
test "if in function", "fn = (x) ->\n  if x > 0\n    'positive'\n  else\n    'negative'\nfn(5)", "positive"

# Code generation
code "simple if", "if cond then a else b", "if (cond) { a; } else { b; }"

# ============================================================================
# Unless Statements: "unless"
# ============================================================================

# Basic unless
test "unless false", "unless false\n  42", 42
test "unless true", "unless true\n  42\nelse\n  10", 10

# Unless as expression
test "unless expression", "x = unless false then 'yes' else 'no'\nx", "yes"

# Postfix unless
test "postfix unless false", "x = 42 unless false\nx", 42
test "postfix unless true", "x = 42 unless true\nx", undefined

# Unless vs if not
test "unless vs if not", "a = unless true then 1 else 2; b = if !true then 1 else 2; a == b", true

# Code generation
code "unless", "unless cond then a", "if (!cond) { a; }"

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Conditionals implemented: 0/2 (0%)
# Tests passing: 0/23 (0%)
# Test: Ternary Operator (1 node type)
# Tests "?:" node type

# ============================================================================
# Ternary Operator: "?:"
# ============================================================================

# Basic ternary
test "ternary true", "true ? 'yes' : 'no'", "yes"
test "ternary false", "false ? 'yes' : 'no'", "no"

# Ternary with expressions
test "ternary with comparison", "5 > 3 ? 'greater' : 'less'", "greater"
test "ternary with operations", "10 > 5 ? 100 + 1 : 200 + 1", 101

# Nested ternary
test "nested ternary", "x = 2\nx == 1 ? 'one' : x == 2 ? 'two' : 'other'", "two"

# Ternary as expression
test "ternary in assignment", "x = true ? 42 : 10\nx", 42
test "ternary in function", "fn = (cond) -> cond ? 'yes' : 'no'\nfn(true)", "yes"

# Code generation
code "simple ternary", "true ? 1 : 2", "(true ? 1 : 2)"
code "nested ternary", "true ? 1 : false ? 2 : 3", "(true ? 1 : (false ? 2 : 3))"

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Ternary implemented: 0/1 (0%)
# Tests passing: 0/8 (0%)
# Test: Switch Statements (2 node types)
# Tests "switch" and "when" node types

# ============================================================================
# Switch Statements: "switch"
# ============================================================================

# Basic switch with value
test "switch with value", "x = 2; result = switch x\n  when 1 then 'one'\n  when 2 then 'two'\n  else 'other'\nresult", "two"

# Switch with multiple cases
test "switch multiple when", "x = 3; result = switch x\n  when 1, 2 then 'low'\n  when 3, 4 then 'mid'\n  else 'high'\nresult", "mid"

# Switch with default
test "switch default", "x = 10; result = switch x\n  when 1 then 'one'\n  when 2 then 'two'\n  else 'other'\nresult", "other"

# Switch without discriminant (condition-based)
test "switch no discriminant", "x = 15; result = switch\n  when x < 10 then 'low'\n  when x < 20 then 'mid'\n  else 'high'\nresult", "mid"

# Switch with blocks
test "switch with block", "x = 2; result = switch x\n  when 1\n    'one'\n  when 2\n    'two'\n  else\n    'other'\nresult", "two"

# Code generation
code "switch", "switch x\n  when 1 then 'one'\n  else 'other'", "switch (x) {\n  case 1:\n    'one';\n    break;\n  default:\n    'other';\n    break;\n}"

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Switch types implemented: 0/2 (0%)
# Tests passing: 0/10 (0%)
# Test: Statement Blocks (1 node type)
# Tests "block" node type

# ============================================================================
# Statement Blocks: "block"
# ============================================================================

# Block in function
test "block in function", "fn = ->\n  x = 5\n  y = 10\n  x + y\nfn()", 15

# Block in if statement
test "block in if", "x = if true\n  a = 5\n  b = 10\n  a + b\nx", 15

# Block with multiple statements
test "multiple statements", "fn = ->\n  a = 1\n  b = 2\n  c = 3\n  a + b + c\nfn()", 6

# Empty block (edge case)
test "empty block", "fn = ->\nfn()", undefined

# Nested blocks
test "nested blocks", "fn = ->\n  if true\n    x = 5\n    y = 10\n    x + y\nfn()", 15

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Blocks implemented: 0/1 (0%)
# Tests passing: 0/5 (0%)
# Test: Do Expressions (1 node type)
# Tests "do-iife" node type

# ============================================================================
# Do IIFE: "do-iife"
# ============================================================================

# Basic do expression
test "do expression", "x = do -> 42\nx", 42

# Do with multiple statements
test "do block", "x = do ->\n  a = 5\n  b = 10\n  a + b\nx", 15

# Do with parameters
test "do with params", "counter = do (count = 0) -> -> count++\n[counter(), counter(), counter()]", [0, 1, 2]

# Async do
test "async do", "x = do -> await Promise.resolve(42)\nx", 42

# Code generation
code "do expression", "do -> 42", "(function() { return 42; })()"
code "do block", "do ->\n  x = 5\n  x * 2", "(function() {\n  let x;\n  x = 5;\n  return (x * 2);\n})();"

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Node types: if, unless, ?:, switch, block, do-iife
# Tests: 44 total (44 passing, 0 failing)
# Coverage: Conditionals, ternary, switch/when, statement blocks, do expressions, nested control flow
