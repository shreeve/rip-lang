# Test: Property Access (6 node types)
# Tests ".", "?.", "::", "?::", "[]", "?[]" node types

# ============================================================================
# Property Access: "."
# ============================================================================

# Basic property access
test "property access", "obj = {x: 42}; obj.x", 42
test "nested property", "obj = {a: {b: 10}}; obj.a.b", 10
test "property chain", "obj = {a: {b: {c: 5}}}; obj.a.b.c", 5

# Code generation
code "property access", "obj.prop", "obj.prop"
code "chained property", "obj.a.b", "obj.a.b"

# Method access
test "method access", "obj = {fn: -> 42}; obj.fn()", 42

# ============================================================================
# Optional Chaining: "?."
# ============================================================================

# Optional property access
test "optional chain exists", "obj = {x: 42}; obj?.x", 42
test "optional chain null", "obj = null; obj?.x", undefined
test "optional chain undefined", "obj = undefined; obj?.x", undefined

# Code generation
code "optional chain", "obj?.prop", "obj?.prop"

# Chained optional access
test "chained optional", "obj = {a: {b: 10}}; obj?.a?.b", 10
test "chained optional null", "obj = {a: null}; obj?.a?.b", undefined

# ============================================================================
# Prototype Access: "::"
# ============================================================================

# Direct prototype access
test "prototype access", "Array::push", Array.prototype.push
test "prototype method", "Boolean::toString", Boolean.prototype.toString

# Code generation
code "prototype access", "obj::method", "obj.prototype.method"

# Shorthand prototype
test "shorthand prototype", "Array::", Array.prototype

# ============================================================================
# Optional Prototype: "?::"
# ============================================================================

# Optional prototype access
test "optional prototype exists", "Array?::push", Array.prototype.push
test "optional prototype null", "obj = null; obj?::method", undefined

# Code generation
code "optional prototype", "obj?::method", "(obj != null ? obj.prototype.method : undefined)"

# ============================================================================
# Array Indexing: "[]"
# ============================================================================

# Basic indexing
test "array index", "arr = [10, 20, 30]; arr[1]", 20
test "negative index", "arr = [1, 2, 3]; arr[arr.length - 1]", 3
test "index expression", "arr = [10, 20]; i = 1; arr[i]", 20

# Code generation
code "array index", "arr[0]", "arr[0]"
code "index expression", "arr[i + 1]", "arr[(i + 1)]"

# Object bracket notation
test "object bracket", 'obj = {name: "test"}; obj["name"]', "test"
test "dynamic property", 'obj = {x: 42}; key = "x"; obj[key]', 42

# ============================================================================
# Optional Indexing: "?[]"
# ============================================================================

# Optional array indexing (ES6)
test "optional index exists", "arr = [1, 2, 3]\narr?.[1]", 2
test "optional index null", "arr = null\narr?.[0]", undefined

# Code generation
code "optional index", "arr?.[i]", "arr?.[i]"

# ============================================================================
# Stats for CODEGEN.md
# ============================================================================
# Node types: ., [], ::, ?., ?.[, ?::
# Tests: 29 total (29 passing, 0 failing)
# Coverage: Property access, array indexing, prototype access, optional chaining, dynamic properties, nested access
